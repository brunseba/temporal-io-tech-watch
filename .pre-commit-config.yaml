# Pre-commit configuration for DNS repository quality management
# See https://pre-commit.com for more information
# See https://pre-commit.com/hooks.html for more hooks

repos:
  # General file quality checks
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v4.5.0
    hooks:
      # File format and encoding
      - id: check-yaml
        name: Check YAML syntax
        description: Validates YAML files for syntax errors
        args: ['--unsafe']  # Allow custom YAML tags
      - id: check-json
        name: Check JSON syntax
        description: Validates JSON files for syntax errors
      - id: check-toml
        name: Check TOML syntax
        description: Validates TOML files for syntax errors
      - id: check-xml
        name: Check XML syntax
        description: Validates XML files for syntax errors
      
      # File consistency
      - id: end-of-file-fixer
        name: Fix end of files
        description: Ensures files end with a newline
      - id: trailing-whitespace
        name: Trim trailing whitespace
        description: Removes trailing whitespace from files
        args: [--markdown-linebreak-ext=md]
      - id: mixed-line-ending
        name: Fix mixed line endings
        description: Ensures consistent line endings
        args: ['--fix=lf']
      
      # File size and content checks
      - id: check-added-large-files
        name: Check for large files
        description: Prevents addition of large files
        args: ['--maxkb=1024']  # 1MB limit
      - id: check-case-conflict
        name: Check case conflicts
        description: Prevents case-insensitive filename conflicts
      - id: check-merge-conflict
        name: Check merge conflicts
        description: Prevents accidental merge conflict markers
      - id: check-symlinks
        name: Check symlinks
        description: Validates symlink integrity
      
      # Security checks
      - id: check-private-key
        name: Check for private keys
        description: Prevents accidental commit of private keys
      - id: detect-aws-credentials
        name: Detect AWS credentials
        description: Prevents accidental AWS credential commits
      - id: detect-private-key
        name: Detect private keys
        description: Additional private key detection
      
      # File executable permissions
      - id: check-executables-have-shebangs
        name: Check executable shebangs
        description: Ensures executable files have shebangs
      - id: check-shebang-scripts-are-executable
        name: Check shebang executables
        description: Ensures shebang scripts are executable

  # Docker and container quality
  - repo: https://github.com/hadolint/hadolint
    rev: v2.12.0
    hooks:
      - id: hadolint-docker
        name: Lint Dockerfiles
        description: Lints Dockerfile for best practices
        args: ['--ignore', 'DL3008', '--ignore', 'DL3009']  # Ignore apt-get version pinning

  # Shell script quality
  - repo: https://github.com/shellcheck-py/shellcheck-py
    rev: v0.9.0.6
    hooks:
      - id: shellcheck
        name: Lint shell scripts
        description: Lints shell scripts for common issues
        args: ['--severity=warning']
        files: \.(sh|bash)$

  # YAML formatting and linting
  - repo: https://github.com/adrienverge/yamllint
    rev: v1.35.1
    hooks:
      - id: yamllint
        name: Lint YAML files
        description: Lints YAML files for style and syntax
        args: ['-d', '{extends: relaxed, rules: {line-length: {max: 120}, truthy: {check-keys: false}}}']

  # Markdown quality
  - repo: https://github.com/igorshubovych/markdownlint-cli
    rev: v0.39.0
    hooks:
      - id: markdownlint
        name: Lint Markdown files
        description: Lints Markdown files for style consistency
        args: ['--fix', '--disable', 'MD013', 'MD033', 'MD041']  # Disable line length, HTML, first line h1

  # Python code quality (for scripts and octoDNS configs)
  - repo: https://github.com/psf/black
    rev: 23.12.1
    hooks:
      - id: black
        name: Format Python code
        description: Formats Python code with Black
        language_version: python3
        files: \.py$

  - repo: https://github.com/pycqa/isort
    rev: 5.13.2
    hooks:
      - id: isort
        name: Sort Python imports
        description: Sorts Python imports alphabetically
        args: ['--profile', 'black']
        files: \.py$

  - repo: https://github.com/pycqa/flake8
    rev: 7.0.0
    hooks:
      - id: flake8
        name: Lint Python code
        description: Lints Python code for style and errors
        args: ['--max-line-length=88', '--extend-ignore=E203,W503']
        files: \.py$

  # JavaScript/Node.js quality (for DNSControl configs)
  - repo: https://github.com/pre-commit/mirrors-eslint
    rev: v8.57.0
    hooks:
      - id: eslint
        name: Lint JavaScript files
        description: Lints JavaScript files for quality
        files: \.(js|jsx)$
        additional_dependencies:
          - eslint@8.57.0
          - eslint-config-standard@17.1.0
          - eslint-plugin-import@2.29.1
          - eslint-plugin-node@11.1.0
          - eslint-plugin-promise@6.1.1

  # JSON formatting
  - repo: https://github.com/pre-commit/mirrors-prettier
    rev: v4.0.0-alpha.8
    hooks:
      - id: prettier
        name: Format JSON and other files
        description: Formats JSON, YAML, and Markdown files
        files: \.(json|md)$
        args: ['--write', '--tab-width=2']

  # DNS-specific checks
  - repo: local
    hooks:
      # BIND configuration validation
      - id: named-checkconf
        name: Validate BIND configuration
        description: Validates BIND DNS configuration files
        entry: bash -c 'if command -v named-checkconf >/dev/null 2>&1; then named-checkconf config/named.conf || echo "Warning: BIND config validation failed (named-checkconf not available)"; else echo "Skipping BIND validation (named-checkconf not installed)"; fi'
        language: system
        files: ^config/.*\.conf$
        pass_filenames: false
        always_run: false

      # TSIG key format validation
      - id: tsig-key-format
        name: Validate TSIG key format
        description: Validates TSIG key format in environment files
        entry: bash -c 'grep -E "^[A-Z_]*TSIG.*=" .env* | grep -qE "^[A-Z_]*TSIG.*=[A-Za-z0-9+/=]+$" || { echo "Warning: TSIG keys should be base64 encoded"; exit 0; }'
        language: system
        files: ^\.env
        pass_filenames: false

      # Docker Compose validation
      - id: docker-compose-validate
        name: Validate Docker Compose files
        description: Validates Docker Compose file syntax
        entry: bash -c 'if command -v docker-compose >/dev/null 2>&1; then docker-compose config -q || echo "Warning: Docker Compose validation failed"; else echo "Skipping Docker Compose validation (docker-compose not installed)"; fi'
        language: system
        files: ^docker-compose.*\.ya?ml$
        pass_filenames: false

      # Environment file security check
      - id: env-security-check
        name: Check environment file security
        description: Ensures sensitive environment files are in .gitignore
        entry: bash -c 'for env_file in .env .env.local .env.production; do if [ -f "$env_file" ] && ! grep -q "^$env_file$" .gitignore 2>/dev/null; then echo "Warning: $env_file should be in .gitignore"; fi; done'
        language: system
        files: ^\.env
        pass_filenames: false
        always_run: true

      # Documentation link validation
      - id: doc-link-check
        name: Check documentation links
        description: Validates internal links in documentation
        entry: bash -c 'find docs -name "*.md" -exec grep -l "\[.*\](.*\.md)" {} \; | xargs -I {} bash -c "grep -oE \"\[.*\]\([^)]*\.md[^)]*\)\" \"{}\" | sed \"s/.*(\([^)]*\)).*/\1/\" | while read link; do if [[ \"\$link\" =~ ^http ]]; then continue; fi; if [[ \"\$link\" =~ ^\/ ]]; then link=\"docs\${link}\"; elif [[ ! \"\$link\" =~ ^\.\. ]]; then link=\"\$(dirname \"{}\")/\$link\"; fi; link=\$(echo \"\$link\" | sed \"s/#.*//\"); if [ ! -f \"\$link\" ]; then echo \"Broken link in {}: \$link\"; fi; done"'
        language: system
        files: ^docs/.*\.md$
        pass_filenames: false

  # Git commit message quality
  - repo: https://github.com/compilerla/conventional-pre-commit
    rev: v3.0.0
    hooks:
      - id: conventional-pre-commit
        name: Conventional commit format
        description: Ensures commit messages follow conventional format
        stages: [commit-msg]

# Configuration for specific tools
ci:
  autofix_commit_msg: |
    [pre-commit.ci] auto fixes from pre-commit.com hooks

    for more information, see https://pre-commit.ci
  autofix_prs: true
  autoupdate_branch: ''
  autoupdate_commit_msg: '[pre-commit.ci] pre-commit autoupdate'
  autoupdate_schedule: weekly
  skip: []
  submodules: false
